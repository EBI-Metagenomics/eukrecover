/*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     Config to store module specific params.
     - publishDir
     - ext arguments
     - prefixes
     ( execution params are in nf_*.config )
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

process {

    withName: "FASTP*" {
        publishDir = [
            [
                path: "${params.outdir}/fastp/",
                mode: params.publish_dir_mode,
                failOnError: true,
            ]
        ]
    }

    withName: ALIGNMENT {
        ext.alignment_args = [
            "-q", "20",
            "-Sb",
        ].join(' ').trim()
        ext.decontamination_args = [
            "-f", "4",
            "-F", "256",
            "-uS",
        ].join(' ').trim()
    }

    withName: BAT_TAXONOMY_WRITER {
        publishDir = [
            [
                path: "${params.outdir}/taxonomy/eukaryotes/",
                mode: params.publish_dir_mode,
                failOnError: true,
            ]
        ]
    }

    withName: BUSCO {
        publishDir = [
            [
                path: "${params.outdir}/qc/busco/",
                mode: params.publish_dir_mode,
                failOnError: true,
            ]
        ]
    }

    withName: BUSCO_EUKCC_QC {
        publishDir = [
            [
                path: "${params.outdir}/qc/",
                mode: params.publish_dir_mode,
                failOnError: true,
            ]
        ]
    }

    withName: CAT {
        publishDir = [
            [
                path: "${params.outdir}/intermediate_steps/cleaning_bins/",
                mode: params.publish_dir_mode,
                failOnError: false,
            ]
        ]
    }

    withName: "CHECKM2" {
        publishDir = [
            [
                path: "${params.outdir}/intermediate_steps/checkm2",
                mode: params.publish_dir_mode,
            ]
        ]
    }

    withName: "CHECKM2_REFINE" {
        publishDir = [
            [
                path: "${params.outdir}/intermediate_steps/checkm2/refinement",
                mode: params.publish_dir_mode,
            ]
        ]
    }

    withName: "CHECKM2_BINNER*" {
        publishDir = [
            [
                path: "${params.outdir}/intermediate_steps/checkm2/binning",
                mode: params.publish_dir_mode,
            ]
        ]
    }

    withName: CHECKM_TABLE_FOR_DREP_GENOMES {
        publishDir = [
            [
                path: "${params.outdir}/",
                mode: params.publish_dir_mode,
            ]
        ]
    }

    withName: "CONCOCT_.*" {

        publishDir = [
            [
                path: { "${params.outdir}/intermediate_steps/binning/concot/bins" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> new File(filename).getName() },
                pattern: "*/*.fa"
            ]
        ]
        ext.prefix = { "concot-${meta.id}" }
    }

    withName: CONCOCT_CUTUPFASTA {

        ext.args = [
            "-c 10000",
            "--merge_last",
            "-o 0"
        ].join(' ').trim()
    }

    withName: CONCOCT_CONCOCT {

        ext.args = [
            params.min_contig_size <= 1000 ? "-l 1000" : "-l ${params.min_contig_size}",
        ].join(' ').trim()
    }

    withName: CONSOLIDATE_BINS {
        publishDir = [
            [
                path: "${params.outdir}/intermediate_steps/refinement/consolidated_bins/",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "consolidated_bins/*"
            ],
            [
                path: "${params.outdir}/intermediate_steps/refinement/",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "consolidated_stats.tsv"
            ],
            [
                path: "${params.outdir}/intermediate_steps/refinement/dereplicated_bins/",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "dereplicated_bins/*"
            ],
        ]
    }

    withName: COVERAGE_RECYCLER {
        publishDir = [
            [
                path: "${params.outdir}/coverage/prokaryotes/",
                mode: params.publish_dir_mode,
                failOnError: true,
            ]
        ]
    }
    withName: COVERAGE_RECYCLER_EUK {
        publishDir = [
            [
                path: "${params.outdir}/coverage/eukaryotes/",
                mode: params.publish_dir_mode,
                failOnError: true,
            ]
        ]
    }

    withName: DETECT_RRNA {
        publishDir = [
            [
                path: "${params.outdir}/rna",
                saveAs: {
                    filename -> {
                        if ( !filename.endsWith(".fasta") ) {
                            return null
                        }
                        def output_file = new File(filename);
                        def genome_id = fasta.baseName;
                        if ( output_file.name.contains("_rRNAs") ) {
                            return "${genome_id}/rna/${genome_id}_fasta/${output_file.name}";
                        }
                        return null;
                    }
                },
                mode: params.publish_dir_mode,
                failOnError: true,
            ],
            [
                path: "${params.outdir}/rna",
                saveAs: {
                    filename -> {
                        if ( !filename.endsWith(".out") ) {
                            return null;
                        }
                        def output_file = new File(filename);
                        def genome_id = fasta.baseName;
                        if ( output_file.name.contains("_rRNAs") || output_file.name.contains("_tRNA_20aa") ) {
                            return "${genome_id}/rna/${genome_id}_out/${output_file.name}";
                        }
                        return null;
                    }
                },
                mode: params.publish_dir_mode,
                failOnError: true,
            ]
        ]
    }

    withName: DREP_MAGS {
        publishDir = [
            [
                path: "${params.outdir}/intermediate_steps/eukaryotes/drep",
                mode: params.publish_dir_mode,
                pattern: "dereplicated_genomes.txt"
            ],
            [
                path: "${params.outdir}/intermediate_steps/eukaryotes/drep/dereplicated_genomes",
                mode: params.publish_dir_mode,
                pattern: "drep_output/dereplicated_genomes/*"
            ]
        ]
    }

    withName: EUKCC {
        publishDir = [
            [
                path: "${params.outdir}/intermediate_steps/eukaryotes/eukcc/merged_bins/",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.merged_bins.csv"
            ],
            [
                path: "${params.outdir}/intermediate_steps/eukaryotes/eukcc/stats/",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.eukcc.csv"
            ]
        ]
    }


    withName: LINKTABLE {
        publishDir = [
            [
                path: "${params.outdir}/intermediate_steps/eukaryotes/eukcc/links/",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.links.csv"
            ]
        ]
    }

    withName: GUNC {
        publishDir = [
            [
                path: "${params.outdir}/intermediate_steps/qs50/gunc/",
                mode: params.publish_dir_mode,
                failOnError: false,
            ]
        ]
    }

    withName: FILTER_QS50 {
        publishDir = [
            [
                path: "${params.outdir}/intermediate_steps/qs50/",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "quality_file.csv"
            ]
        ]
    }


    withName: GTDBTK {
        publishDir = [
            [
                path: "${params.outdir}",
                mode: params.publish_dir_mode,
                failOnError: true
            ]
        ]
    }


    withName: MAXBIN2 {

        publishDir = [
            [
                path: { "${params.outdir}/intermediate_steps/binning/maxbin2/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*.tooshort.gz'
            ],
        ]
        ext.prefix = { "maxbin2-${meta.id}" }
        // if no gene found, will crash so allow ignore so rest of pipeline
        // completes but without MaxBin2 results
        ext.args = [
            params.min_contig_size <= 1000 ? "-min_contig_length 1000" : "-min_contig_length ${params.min_contig_size}",
        ].join(' ').trim()
    }

    withName: RENAME_MAXBIN {
        publishDir = [
            [
                path: { "${params.outdir}/intermediate_steps/binning/maxbin2/bins" },
                mode: params.publish_dir_mode,
                //pattern: '*.fa.gz'
            ]
        ]
    }

    withName: METABAT2_METABAT2 {

        publishDir = [
            [
                path: { "${params.outdir}/intermediate_steps/binning/metabat2/" },
                mode: params.publish_dir_mode,
                pattern: '*metabat_bins/*.fa'
            ],
            [
                path: { "${params.outdir}/intermediate_steps/binning/metabat2/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*tooShort.fa'
            ],
            [
                path: { "${params.outdir}/intermediate_steps/binning/metabat2/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*lowDepth.fa'
            ]
        ]
        ext.prefix = { "metabat2-${meta.id}" }
        ext.args = [
            params.min_contig_size < 1500 ? "-m 1500" : "-m ${params.min_contig_size}",
            "--unbinned",
            "--seed ${params.metabat2_rng_seed}"
        ].join(' ').trim()
    }

    withName: METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS {
        publishDir = [
            path: { "${params.outdir}/intermediate_steps/binning/metabat2/depths/contigs" },
            mode: params.publish_dir_mode,
            pattern: '*.txt.gz'
        ]
    }

    withName: MODIFY_QUALITY_FILE {
        publishDir = [
            [
                path: "${params.outdir}/intermediate_steps/qs50",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "aggregated_euk_quality.csv"
            ],
        ]
    }

    withName: RENAME_MAXBIN {

        publishDir = [
            [
                path: { "${params.outdir}/intermediate_steps/Binning/MaxBin2/bins" },
                mode: params.publish_dir_mode,
                failOnError: true
            ],
        ]
    }
}
